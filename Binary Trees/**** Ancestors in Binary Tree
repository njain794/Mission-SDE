//method 1
bool solve(struct Node *root,int target,vector<int>&v)
{
    if(root==NULL)
    {
        return false;
    }
    if(root->data==target)
    {
        return true;
    }
    //v.push_back(root->data);
    bool lt=solve(root->left,target,v);
    bool rt=solve(root->right,target,v);
    if(lt or rt)
    {
        v.push_back(root->data);
        return true;
    }
    return false;
}
//method 2
void solve2(Node *root,int target,vector<int>&v,vector<int>path)
{
    if(root==NULL)
    {
        return;
    }
    if(root->data == target)
    {
        v.assign(path.begin(),path.end());
        return;
    }
    else
    {
        path.push_back(root->data);
    }
    solve2(root->left,target,v,path);
    solve2(root->right,target,v,path);
    path.pop_back();
}
vector<int> Ancestors(struct Node *root, int target)
{
    vector<int>v;
    bool flag;
    if(root==NULL)
    {
        return v;
    }
    vector<int>path;
    solve2(root,target,v,path);
    reverse(v.begin(),v.end());
    //bool t = solve(root,target,v);
    return v;
     // Code here
}
