class Solution{
public:
    int dp[1002][1002];
    /*int knap(int n,int w,int val[],int wt[])
    {
        if(n==0 or w==0)
        {
            return 0;
        }
        if(wt[n-1]<=w)
        {
            return max(val[n-1]+knap(n,w-wt[n-1],val,wt),knap(n-1,w,val,wt));
        }     
        else
        {
            return knap(n-1,w,val,wt);
        }
    }*/
    int knap(int n,int w,int val[],int wt[])
    {
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=w;j++)
            {
                if(i==0 or j==0)
                {
                    dp[i][j]=0;
                }
                else if(wt[i-1]<=j)
                {
                    dp[i][j]=max(val[i-1]+dp[i][j-wt[i-1]],dp[i-1][j]);
                }
                else
                {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[n][w];
    }
    int knapSack(int n, int w, int val[], int wt[])
    {
        
        return knap(n,w,val,wt);
    }
};
