
class Solution{
public:
    bool dp[1002][1002];
    /*bool subset(int arr[],int n,int sum)
    {
        if(sum==0 or (n==0 and sum==0))
        {
            return true;
        }
        if(n==0)
        {
            return false;
        }
        if(arr[n-1]<=sum)
        {
            return subset(arr,n-1,sum-arr[n-1]) or subset(arr,n-1,sum);
        }
        else
        {
            return subset(arr,n-1,sum);
        }
    }*/
    /*bool subset(int arr[],int n,int sum)
    {
        if(sum==0 or (n==0 and sum==0))
        {
            return dp[n][sum]=true;
        }
        if(n==0)
        {
            return dp[n][sum]=false;
        }
        if(dp[n][sum]!=false)
        {
            return dp[n][sum];
        }
        if(arr[n-1]<=sum)
        {
            return dp[n][sum]=subset(arr,n-1,sum-arr[n-1]) or subset(arr,n-1,sum);
        }
        else
        {
            return dp[n][sum]=subset(arr,n-1,sum);
        }
    }*/
    bool subset(int arr[],int n,int sum)
    {
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                if(j==0 or (i==0 and j==0))
                {
                    dp[i][j]=true;
                }
                else if(i==0)
                {
                    dp[i][j]=false;
                }
                else if(arr[i-1]<=j)
                {
                    dp[i][j]=dp[i-1][j-arr[i-1]] or dp[i-1][j];
                }
                else
                {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[n][sum];
    }
    int equalPartition(int n, int arr[])
    {
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum+=arr[i];
        }
        if(sum%2!=0)
        {
            return 0;
        }
        else
        {
            //bool dp[1002][1002];
            memset(dp,false,sizeof(dp)/sizeof(int));
            if(subset(arr,n,sum/2))
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        // code here
    }
};
