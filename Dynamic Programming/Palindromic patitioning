class Solution{
public:
    int dp[1001][1002];
    bool ispalo(string str,int i,int j)
    {
        if(str.size()==0)
        {
            return true;
        }
        if(i>j)
        {
            return true;
        }
        while(i<j)
        {
            if(str[i]!=str[j])
            {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    int palo(string str,int i,int j)
    {
        int left,right;
        if(i>=j)
        {
            return 0;
        }
        if(ispalo(str,i,j))
        {
            return 0;
        }
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int mn=INT_MAX;
        for(int k=i;k<j;k++)
        {
            if(dp[i][k]!=-1)
            {
                left=dp[i][k]; 
            }
            else
            {
                left=palo(str,i,k);
            }
            if(dp[k+1][j]!=-1)
            {
                right=dp[k+1][j];
            }
            else
            {
                right=palo(str,k+1,j);
            }
            //int temp=1+palo(str,i,k)+palo(str,k+1,j);
            int temp=1+left+right;
            mn=min(mn,temp);
        }
        dp[i][j] = mn;
        return dp[i][j];
    }
    int palindromicPartition(string str)
    {
        int i=0;
        int j=str.size()-1;
        memset(dp,-1,sizeof(dp));
        return palo(str,i,j);
        // code here
    }
};
